// Low byteC

/* Get LOW byte of int */
unsigned char getLOWbyte(unsigned int input)
{
	return input & 255;
}

/* Get HIGH byte of int */
unsigned char getHIGHbyte(unsigned int input)
{
	return (input >> 8) & 255;
}

/* Combine HIGH and LOW bytes */
unsigned int combineBytes(unsigned char high, unsigned char low)
{
	return (int) (high << 8) + low;
}

unsigned int generateCRC(unsigned char * data, unsigned char length)
{
	unsigned int crc = 0xFFFF;
	for (int i = 0; i < length; i++) {
		crc = CRC16 (crc, data[i] );
	}
	
	return crc;
}
 
/* CRC algorithm */
unsigned int CRC16(unsigned int crc, unsigned int data)
{
	const unsigned int Poly16=0xA001;
	unsigned int LSB, i;
	crc = ((crc^data) | 0xFF00) & (crc | 0x00FF);
	for (i=0; i<8; i++) {
		LSB=(crc & 0x0001);
		crc=crc/2;
		if (LSB)
		crc=crc^Poly16;
	}
	return(crc);
}


3
4
5
6
7
8
9
10
11
12
13
14
15
16
/* Modbus - 03 Read Holding Registers */
if(rx_byte_count >= 8 && rx_buffer[0] == device_id)
{
	/* Check for function code */
	if(rx_buffer[1] == 3)
	{
		/* Check CRC of request */
		if(checkCRC(rx_buffer, rx_byte_count ) != 0)
		{
			/* Prepare data for reply */
			prepareOutputArray(rx_buffer);
		}
		/* Reset RX counter */
		rx_wr_index = 0;
	}
}

C

/* Answer to the Master device */
void prepareOutputArray(unsigned char * data)
{
	/* Check for exception */
	char exception = checkException(data);

	/* Temporary counters */
	int temp_cnt_bits = 0;
	int temp_cnt_reg = 0;

	/* Check if exception exist */
	if(exception == 0x00)
	{
		/* Exception doesn't exist */
		switch(data[1])
		{
			/**** Function Code 03 - Read Holding Registers ****/
			case 3:
				tx_buffer[0] = data[0];
				tx_buffer[1] = data[1];
				/* Number of output registers related to requested registers */
				tx_buffer[2] = data[5] * 2;
				/* Temp register */
				temp_cnt_bits = 0;
				temp_cnt_reg = data[3];
				/* Populate register */
				for(int k = 0; k < data[5]; k++)
				{
					tx_buffer[3 + temp_cnt_bits] = getHIGHbyte(REG[data[3] + k]);
					temp_cnt_bits++;
					tx_buffer[3 + temp_cnt_bits] = getLOWbyte(REG[data[3] + k]);
					temp_cnt_bits++;
					
				}
				/* Prepare CRC at the end */
				tx_buffer[tx_buffer[2] + 3] = getLOWbyte(generateCRC(tx_buffer, tx_buffer[2] + 3));
				tx_buffer[tx_buffer[2] + 4] = getHIGHbyte(generateCRC(tx_buffer, tx_buffer[2] + 3));
				
				/* Send array to output */
				for(int i = 0; i < tx_buffer[2] + 5; i++)
				{
					/* Custom function for writing a byte to the output */
					SendByteToOutput(tx_buffer[i]);
				}
			break;
		}
	}
	else
	{
		/* Exception exist */
		tx_buffer[0] = (data[1] + 0x80);
		tx_buffer[1] = exception;
		tx_buffer[2] = getLOWbyte(generateCRC(tx_buffer, 2));
		tx_buffer[3] = getHIGHbyte(generateCRC(tx_buffer, 2));
		
		for(int i = 0; i < 4; i++)
		{
			/* Custom function for writing a byte to the output */
			SendByteToOutput(tx_buffer[i]);
		}
	}	
}


/* Answer to the Master device */
void prepareOutputArray(unsigned char * data)
{
	/* Check for exception */
	char exception = checkException(data);
 
	/* Temporary counters */
	int temp_cnt_bits = 0;
	int temp_cnt_reg = 0;
 
	/* Check if exception exist */
	if(exception == 0x00)
	{
		/* Exception doesn't exist */
		switch(data[1])
		{
			/**** Function Code 03 - Read Holding Registers ****/
			case 3:
				tx_buffer[0] = data[0];
				tx_buffer[1] = data[1];
				/* Number of output registers related to requested registers */
				tx_buffer[2] = data[5] * 2;
				/* Temp register */
				temp_cnt_bits = 0;
				temp_cnt_reg = data[3];
				/* Populate register */
				for(int k = 0; k < data[5]; k++)
				{
					tx_buffer[3 + temp_cnt_bits] = getHIGHbyte(REG[data[3] + k]);
					temp_cnt_bits++;
					tx_buffer[3 + temp_cnt_bits] = getLOWbyte(REG[data[3] + k]);
					temp_cnt_bits++;
					
				}
				/* Prepare CRC at the end */
				tx_buffer[tx_buffer[2] + 3] = getLOWbyte(generateCRC(tx_buffer, tx_buffer[2] + 3));
				tx_buffer[tx_buffer[2] + 4] = getHIGHbyte(generateCRC(tx_buffer, tx_buffer[2] + 3));
				
				/* Send array to output */
				for(int i = 0; i < tx_buffer[2] + 5; i++)
				{
					/* Custom function for writing a byte to the output */
					SendByteToOutput(tx_buffer[i]);
				}
			break;
		}
	}
	else
	{
		/* Exception exist */
		tx_buffer[0] = (data[1] + 0x80);
		tx_buffer[1] = exception;
		tx_buffer[2] = getLOWbyte(generateCRC(tx_buffer, 2));
		tx_buffer[3] = getHIGHbyte(generateCRC(tx_buffer, 2));
		
		for(int i = 0; i < 4; i++)
		{
			/* Custom function for writing a byte to the output */
			SendByteToOutput(tx_buffer[i]);
		}
	}	
}

char checkException(unsigned char * data)
{
	/* Start register value */
	unsigned int start_register = combineBytes(data[2], data[3]);
	/* Quantity of registers value */
	unsigned int quantity = combineBytes(data[4], data[5]);
	/* Selection by function code */
	switch(data[1])
	{
		/**** Function Code 03 - Read Holding Registers ****/
		case 3:
			if(start_register + quantity - 1 < 20)
			{
				return 0x00;
			}
			else
			{
				/* Illegal Data Address */
				return 0x02;
			}
		break;
	}
}

